@using BlazorWasmHosted.Shared.Entities
@using BlazorWasmHosted.Components.Components.Dropdown
@using System.Net.Http.Json
@inject HttpClient Http

<SearchableDropdown TItem="Supplier"
                    Items="@suppliers"
                    SelectedItem="@SelectedSupplier"
                    SelectedItemChanged="@OnSupplierChanged"
                    ItemTextField="@GetSupplierText"
                    Placeholder="@Placeholder"
                    SearchPlaceholder="@SearchPlaceholder"
                    Disabled="@Disabled" />

@code {
    [Parameter] public Supplier? SelectedSupplier { get; set; }
    [Parameter] public EventCallback<Supplier> SelectedSupplierChanged { get; set; }
    [Parameter] public string Placeholder { get; set; } = "Select supplier...";
    [Parameter] public string SearchPlaceholder { get; set; } = "Search suppliers...";
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public SupplierDisplayFormat DisplayFormat { get; set; } = SupplierDisplayFormat.CodeAndName;

    private List<Supplier> suppliers = new();
    private bool isLoading = true;

    public enum SupplierDisplayFormat
    {
        NameOnly,
        CodeAndName,
        NameWithCountry,
        Full
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadSuppliers();
    }

    private async Task LoadSuppliers()
    {
        try
        {
            isLoading = true;
            suppliers = await Http.GetFromJsonAsync<List<Supplier>>("api/suppliers") ?? new();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading suppliers: {ex.Message}");
            suppliers = new();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task OnSupplierChanged(Supplier supplier)
    {
        SelectedSupplier = supplier;
        await SelectedSupplierChanged.InvokeAsync(supplier);
    }

    private string GetSupplierText(Supplier supplier)
    {
        return DisplayFormat switch
        {
            SupplierDisplayFormat.NameOnly => supplier.SupplierName,
            SupplierDisplayFormat.CodeAndName => $"{supplier.SupplierCode} - {supplier.SupplierName}",
            SupplierDisplayFormat.NameWithCountry => $"{supplier.SupplierName} ({supplier.Country ?? "N/A"})",
            SupplierDisplayFormat.Full => $"{supplier.SupplierCode} - {supplier.SupplierName} ({supplier.Country ?? "N/A"})",
            _ => supplier.SupplierName
        };
    }

    /// <summary>
    /// Reload suppliers from API
    /// </summary>
    public async Task RefreshAsync()
    {
        await LoadSuppliers();
        StateHasChanged();
    }

    /// <summary>
    /// Get all loaded suppliers
    /// </summary>
    public List<Supplier> GetSuppliers() => suppliers;

    /// <summary>
    /// Check if suppliers are loaded
    /// </summary>
    public bool IsLoaded => !isLoading && suppliers.Any();
}
