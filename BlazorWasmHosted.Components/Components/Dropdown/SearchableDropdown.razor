@typeparam TItem
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop

<div class="searchable-dropdown @(IsOpen ? "open" : "")" @ref="dropdownRef">
    <!-- Trigger Button -->
    <button type="button" 
            class="btn btn-outline-secondary dropdown-toggle w-100 text-start d-flex justify-content-between align-items-center"
            @onclick="ToggleDropdown"
            @onclick:stopPropagation="true">
        <span>@GetDisplayText()</span>
        <i class="bi bi-chevron-down ms-2"></i>
    </button>

    <!-- Dropdown Menu -->
    @if (IsOpen)
    {
        <div class="dropdown-menu show w-100 shadow-lg" @onclick:stopPropagation="true">
            <!-- Search Box -->
            <div class="dropdown-search">
                <div class="input-group">
                    <span class="input-group-text bg-white border-end-0">
                        <i class="bi bi-search"></i>
                    </span>
                    <input type="text" 
                           class="form-control border-start-0 ps-0"
                           placeholder="@SearchPlaceholder"
                           @bind="searchText"
                           @bind:event="oninput"
                           @onkeydown="OnSearchKeyDown"
                           @ref="searchInputRef" />
                </div>
            </div>

            <!-- Dropdown Items -->
            <div class="dropdown-items">
                @if (FilteredItems.Any())
                {
                    @foreach (var item in FilteredItems)
                    {
                        var isSelected = SelectedItem?.Equals(item) ?? false;
                        var itemColor = GetItemColor(item);
                        <button type="button"
                                class="dropdown-item d-flex align-items-center @(isSelected ? "active" : "")"
                                @onclick="() => SelectItem(item)">
                            @if (!string.IsNullOrEmpty(itemColor))
                            {
                                <span class="item-color-indicator" style="background-color: @itemColor"></span>
                            }
                            <span class="item-text">@GetItemText(item)</span>
                            @if (isSelected)
                            {
                                <i class="bi bi-check ms-auto"></i>
                            }
                        </button>
                    }
                }
                else
                {
                    <div class="dropdown-item text-muted">
                        <i class="bi bi-exclamation-circle me-2"></i>No results found
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public TItem? SelectedItem { get; set; }
    [Parameter] public EventCallback<TItem> SelectedItemChanged { get; set; }
    [Parameter] public List<TItem> Items { get; set; } = new();
    [Parameter] public Func<TItem, string> ItemTextField { get; set; } = item => item?.ToString() ?? "";
    [Parameter] public Func<TItem, string>? ItemColorField { get; set; }
    [Parameter] public string Placeholder { get; set; } = "???";
    [Parameter] public string SearchPlaceholder { get; set; } = "Search...";
    [Parameter] public bool Disabled { get; set; }

    private bool IsOpen { get; set; }
    private string searchText = "";
    private ElementReference dropdownRef;
    private ElementReference searchInputRef;

    private IEnumerable<TItem> FilteredItems
    {
        get
        {
            if (string.IsNullOrWhiteSpace(searchText))
                return Items;

            return Items.Where(item =>
                ItemTextField(item).Contains(searchText, StringComparison.OrdinalIgnoreCase));
        }
    }

    protected override void OnInitialized()
    {
        // Add click outside handler
        if (JSRuntime != null)
        {
            // Will be handled by parent page
        }
    }

    private string GetDisplayText()
    {
        return SelectedItem != null ? ItemTextField(SelectedItem) : Placeholder;
    }

    private string GetItemText(TItem item)
    {
        return ItemTextField(item);
    }

    private string GetItemColor(TItem? item)
    {
        if (item == null || ItemColorField == null)
            return string.Empty;
        return ItemColorField(item);
    }

    private void ToggleDropdown()
    {
        if (Disabled) return;
        IsOpen = !IsOpen;
        searchText = "";
    }

    private async Task SelectItem(TItem item)
    {
        SelectedItem = item;
        await SelectedItemChanged.InvokeAsync(item);
        IsOpen = false;
        searchText = "";
    }

    private void OnSearchKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Escape")
        {
            IsOpen = false;
            searchText = "";
        }
    }

    public void Close()
    {
        IsOpen = false;
        searchText = "";
        StateHasChanged();
    }

    [Inject] private IJSRuntime? JSRuntime { get; set; }
}
